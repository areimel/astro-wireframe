---
export interface Props {
  /** Section title */
  title: string;
  /** Section description */
  description?: string;
  /** Application process steps */
  steps: Array<{
    step: number;
    title: string;
    content: string;
    icon?: string;
    duration?: string;
    status?: "completed" | "current" | "upcoming";
    details?: string[];
  }>;
  /** Layout orientation */
  layout?: "horizontal" | "vertical";
  /** Show step progress */
  showProgress?: boolean;
  /** Current active step (for progress tracking) */
  currentStep?: number;
  /** Custom classes */
  class?: string;
}

const { 
  title,
  description,
  steps,
  layout = "horizontal",
  showProgress = true,
  currentStep = 1,
  class: className = ""
} = Astro.props;

import { Icon } from "astro-icon/components";
---

<section class={`wireframe-section py-16 ${className}`}>
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="text-center mb-12">
      <h2 class="wireframe-heading text-3xl lg:text-4xl mb-4">
        {title}
      </h2>
      {description && (
        <p class="wireframe-text text-xl max-w-2xl mx-auto">
          {description}
        </p>
      )}
    </div>

    <!-- Progress Bar -->
    {showProgress && (
      <div class="mb-12">
        <div class="flex justify-between items-center mb-4">
          <span class="wireframe-text text-sm font-bold">Progress</span>
          <span class="wireframe-text text-sm">
            Step {currentStep} of {steps.length}
          </span>
        </div>
        <div class="wireframe-box doodle-border h-3 theme-quaternary-bg rounded-full overflow-hidden">
          <div class="h-full rounded-full transition-all duration-300" 
               style={`width: ${(currentStep / steps.length) * 100}%; background-color: var(--color-theme-button);`}></div>
        </div>
      </div>
    )}

    <!-- Steps Layout -->
    {layout === "horizontal" ? (
      <div class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {steps.map((step, index) => (
          <div class="relative">
            <!-- Connector Line (desktop only) -->
            {index < steps.length - 1 && (
              <div class="hidden lg:block absolute top-10 left-full w-6 h-1 z-0" 
                   style="background-color: var(--color-theme-stroke);"></div>
            )}
            
            <!-- Step Card -->
            <div class={`wireframe-box doodle-border p-6 text-center relative z-10 ${
              step.status === 'current' ? 'border-4' : ''
            }`} style={step.status === 'current' ? `border-color: var(--color-theme-button);` : ''}>
              
              <!-- Step Number -->
              <div class={`wireframe-box doodle-border w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4 ${
                step.status === 'completed' ? 'theme-button-primary' : 
                step.status === 'current' ? 'theme-button-primary' : 
                'theme-quaternary-bg'
              }`}>
                {step.status === 'completed' ? (
                  <Icon name="bx:bx-check" class="w-6 h-6 text-white" />
                ) : (
                  <span class="wireframe-text font-bold">
                    {step.step}
                  </span>
                )}
              </div>
              
              <!-- Step Icon -->
              {step.icon && (
                <div class="mb-4">
                  <Icon name={step.icon} class="w-8 h-8 mx-auto" style="color: var(--color-theme-button);" />
                </div>
              )}
              
              <!-- Step Title -->
              <h3 class="wireframe-heading text-lg mb-3">
                {step.title}
              </h3>
              
              <!-- Step Content -->
              <p class="wireframe-text text-sm mb-4">
                {step.content}
              </p>
              
              <!-- Duration -->
              {step.duration && (
                <div class="wireframe-text text-xs font-bold mb-3" style="color: var(--color-theme-secondary);">
                  Duration: {step.duration}
                </div>
              )}
              
              <!-- Step Details -->
              {step.details && step.details.length > 0 && (
                <div class="text-left">
                  <div class="wireframe-text text-xs font-bold mb-2">What you'll need:</div>
                  <ul class="space-y-1">
                    {step.details.map((detail) => (
                      <li class="flex items-start gap-2">
                        <Icon name="bx:bx-check" class="w-3 h-3 mt-0.5 flex-shrink-0" style="color: var(--color-theme-button);" />
                        <span class="wireframe-text text-xs">{detail}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    ) : (
      <!-- Vertical Layout -->
      <div class="max-w-2xl mx-auto">
        <div class="relative">
          <!-- Vertical Timeline Line -->
          <div class="absolute left-6 top-0 w-1 h-full" 
               style="background-color: var(--color-theme-stroke);"></div>
          
          <div class="space-y-8">
            {steps.map((step) => (
              <div class="relative flex items-start gap-6">
                <!-- Step Number/Status -->
                <div class={`wireframe-box doodle-border w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 z-10 ${
                  step.status === 'completed' ? 'theme-button-primary' : 
                  step.status === 'current' ? 'theme-button-primary' : 
                  'theme-quaternary-bg'
                }`}>
                  {step.status === 'completed' ? (
                    <Icon name="bx:bx-check" class="w-6 h-6 text-white" />
                  ) : (
                    <span class="wireframe-text font-bold">
                      {step.step}
                    </span>
                  )}
                </div>
                
                <!-- Content -->
                <div class={`wireframe-box doodle-border p-6 flex-1 ${
                  step.status === 'current' ? 'border-4' : ''
                }`} style={step.status === 'current' ? `border-color: var(--color-theme-button);` : ''}>
                  
                  <!-- Step Header -->
                  <div class="flex items-center gap-3 mb-4">
                    {step.icon && (
                      <Icon name={step.icon} class="w-6 h-6" style="color: var(--color-theme-button);" />
                    )}
                    <h3 class="wireframe-heading text-lg">
                      {step.title}
                    </h3>
                    {step.duration && (
                      <span class="wireframe-text text-xs font-bold px-2 py-1 rounded-full theme-quaternary-bg">
                        {step.duration}
                      </span>
                    )}
                  </div>
                  
                  <!-- Step Content -->
                  <p class="wireframe-text mb-4">
                    {step.content}
                  </p>
                  
                  <!-- Step Details -->
                  {step.details && step.details.length > 0 && (
                    <div>
                      <div class="wireframe-text text-sm font-bold mb-2">Requirements:</div>
                      <ul class="space-y-1">
                        {step.details.map((detail) => (
                          <li class="flex items-start gap-2">
                            <Icon name="bx:bx-check" class="w-4 h-4 mt-0.5 flex-shrink-0" style="color: var(--color-theme-button);" />
                            <span class="wireframe-text text-sm">{detail}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    )}

    <!-- Call to Action -->
    <div class="text-center mt-12">
      <button class="theme-button-primary px-8 py-3 text-lg rounded-lg mr-4">
        Start Application
      </button>
      <button class="theme-button-outline px-8 py-3 text-lg rounded-lg">
        Learn More
      </button>
    </div>
  </div>
</section>