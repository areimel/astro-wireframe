---
import { Icon } from "astro-icon/components";

export interface Props {
  /** Card title/metric name */
  title: string;
  /** Primary metric value */
  value: string;
  /** Metric unit (optional) */
  unit?: string;
  /** Trend percentage change */
  trend?: {
    value: number;
    period: string; // e.g., "vs last month"
    direction: "up" | "down" | "neutral";
  };
  /** Icon name for the metric */
  icon?: string;
  /** Card size variant */
  size?: "sm" | "md" | "lg";
  /** Custom classes */
  class?: string;
  /** Background color variant */
  variant?: "default" | "primary" | "success" | "warning" | "danger";
  /** Show chart placeholder */
  showChart?: boolean;
}

const { 
  title,
  value,
  unit = "",
  trend,
  icon = "bx:bx-trending-up",
  size = "md",
  class: className = "",
  variant = "default",
  showChart = false
} = Astro.props;

// Size classes
const sizeClasses = {
  sm: "p-4",
  md: "p-6",
  lg: "p-8"
};

// Card classes
const cardClasses = `
  wireframe-box doodle-border ${sizeClasses[size]} ${className}
  transition-all hover:shadow-md
`.trim();

// Variant styles for icons and accents
const variantStyles = {
  default: "color: var(--color-theme-button);",
  primary: "color: var(--color-theme-button);",
  success: "color: #10b981;",
  warning: "color: #f59e0b;",
  danger: "color: #ef4444;"
};

// Trend arrow icon and color
const getTrendIcon = (direction: string) => {
  switch (direction) {
    case "up": return "bx:bx-trending-up";
    case "down": return "bx:bx-trending-down";
    default: return "bx:bx-minus";
  }
};

const getTrendColor = (direction: string) => {
  switch (direction) {
    case "up": return "#10b981";
    case "down": return "#ef4444";
    default: return "var(--color-theme-tertiary)";
  }
};
---

<div class={cardClasses}>
  <!-- Header with Icon and Title -->
  <div class="flex items-start justify-between mb-4">
    <div class="flex-1">
      <h3 class="wireframe-text text-sm font-medium mb-2" style="color: var(--color-theme-card-text);">
        {title}
      </h3>
    </div>
    {icon && (
      <Icon 
        name={icon} 
        class="w-5 h-5 flex-shrink-0" 
        style={variantStyles[variant]}
      />
    )}
  </div>

  <!-- Main Value -->
  <div class="mb-4">
    <div class="flex items-baseline gap-1">
      <span class="wireframe-heading text-3xl lg:text-4xl">
        {value}
      </span>
      {unit && (
        <span class="wireframe-text text-sm" style="color: var(--color-theme-tertiary);">
          {unit}
        </span>
      )}
    </div>
  </div>

  <!-- Trend Indicator -->
  {trend && (
    <div class="flex items-center gap-2 mb-4">
      <Icon 
        name={getTrendIcon(trend.direction)} 
        class="w-4 h-4" 
        style={`color: ${getTrendColor(trend.direction)};`}
      />
      <span 
        class="wireframe-text text-sm font-medium"
        style={`color: ${getTrendColor(trend.direction)};`}
      >
        {trend.value > 0 ? '+' : ''}{trend.value}%
      </span>
      <span class="wireframe-text text-sm" style="color: var(--color-theme-tertiary);">
        {trend.period}
      </span>
    </div>
  )}

  <!-- Mini Chart Placeholder -->
  {showChart && (
    <div class="mt-4">
      <div 
        class="wireframe-box doodle-border h-16 flex items-center justify-center"
        style="background-color: var(--color-theme-quaternary);"
      >
        <div class="flex items-end gap-1 h-8">
          {Array.from({ length: 12 }, (_, i) => (
            <div 
              class="w-1 rounded-t"
              style={`
                background-color: var(--color-theme-button);
                height: ${Math.random() * 100 + 20}%;
                opacity: 0.7;
              `}
            />
          ))}
        </div>
      </div>
    </div>
  )}

  <!-- Additional Content Slot -->
  <slot />
</div>