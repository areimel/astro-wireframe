---
import { Icon } from "astro-icon/components";

export interface Props {
  /** Title for the order summary */
  title?: string;
  /** Order items */
  items?: Array<{
    id: string;
    name: string;
    description?: string;
    quantity: number;
    price: number;
    image?: string;
    type?: "product" | "service" | "subscription";
  }>;
  /** Currency symbol */
  currency?: string;
  /** Tax rate (percentage) */
  taxRate?: number;
  /** Shipping cost */
  shipping?: number;
  /** Discount amount */
  discount?: number;
  /** Discount code */
  discountCode?: string;
  /** Show edit capabilities */
  allowEdit?: boolean;
  /** Show item images */
  showImages?: boolean;
  /** Custom classes */
  class?: string;
  /** Layout variant */
  layout?: "detailed" | "compact" | "minimal";
}

const { 
  title = "Order Summary",
  items = [
    {
      id: "1",
      name: "Professional Plan",
      description: "Monthly subscription with advanced features",
      quantity: 1,
      price: 29.99,
      type: "subscription"
    },
    {
      id: "2", 
      name: "Priority Support Add-on",
      description: "24/7 phone and chat support",
      quantity: 1,
      price: 19.99,
      type: "service"
    },
    {
      id: "3",
      name: "Extra Storage (100GB)",
      description: "Additional cloud storage",
      quantity: 2,
      price: 9.99,
      type: "service"
    }
  ],
  currency = "$",
  taxRate = 8.5,
  shipping = 0,
  discount = 10,
  discountCode = "SAVE10",
  allowEdit = true,
  showImages = false,
  class: className = "",
  layout = "detailed"
} = Astro.props;

// Calculate totals
const subtotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
const discountAmount = discount || 0;
const subtotalAfterDiscount = subtotal - discountAmount;
const taxAmount = (subtotalAfterDiscount + shipping) * (taxRate / 100);
const total = subtotalAfterDiscount + shipping + taxAmount;
---

<div class={`order-summary ${className}`}>
  {title && (
    <div class="flex items-center justify-between mb-6">
      <h3 class="wireframe-heading text-xl">{title}</h3>
      {allowEdit && (
        <button class="wireframe-text text-sm font-medium hover:opacity-80 transition-opacity"
                style="color: var(--color-theme-button);">
          Edit Cart
        </button>
      )}
    </div>
  )}

  <div class="wireframe-box doodle-border p-6">
    
    <!-- Order Items -->
    <div class="space-y-4 mb-6">
      {items.map((item) => (
        <div class={`flex gap-4 ${layout === "minimal" ? "items-center" : "items-start"}`}>
          
          {/* Item Image/Icon */}
          {showImages || layout !== "minimal" ? (
            <div class="w-16 h-16 wireframe-box doodle-border rounded-lg flex items-center justify-center flex-shrink-0">
              {item.image ? (
                <div class="wireframe-text text-xs text-center">
                  Product<br/>Image
                </div>
              ) : (
                <Icon name={item.type === "subscription" ? "bx:bx-crown" : 
                           item.type === "service" ? "bx:bx-cog" : "bx:bx-package"} 
                      class="w-6 h-6" style="color: var(--color-theme-button);" />
              )}
            </div>
          ) : (
            <div class="w-2 h-2 rounded-full flex-shrink-0 mt-2"
                 style="background-color: var(--color-theme-button);"></div>
          )}
          
          {/* Item Details */}
          <div class="flex-grow">
            <div class="flex justify-between items-start">
              <div class="flex-grow">
                <h4 class="wireframe-text font-medium">{item.name}</h4>
                {item.description && layout === "detailed" && (
                  <p class="wireframe-text text-sm mt-1" style="color: var(--color-theme-tertiary);">
                    {item.description}
                  </p>
                )}
                
                {/* Quantity and Unit Price */}
                <div class="flex items-center gap-4 mt-2">
                  {allowEdit ? (
                    <div class="flex items-center gap-2">
                      <button class="w-6 h-6 border rounded flex items-center justify-center text-sm hover:opacity-70 transition-opacity"
                              style="border-color: var(--color-theme-stroke); color: var(--color-theme-tertiary);"
                              data-item-id={item.id} data-action="decrease">
                        <Icon name="bx:bx-minus" class="w-3 h-3" />
                      </button>
                      <span class="wireframe-text font-medium w-8 text-center quantity-display" data-item-id={item.id}>
                        {item.quantity}
                      </span>
                      <button class="w-6 h-6 border rounded flex items-center justify-center text-sm hover:opacity-70 transition-opacity"
                              style="border-color: var(--color-theme-stroke); color: var(--color-theme-tertiary);"
                              data-item-id={item.id} data-action="increase">
                        <Icon name="bx:bx-plus" class="w-3 h-3" />
                      </button>
                    </div>
                  ) : (
                    <span class="wireframe-text text-sm">Qty: {item.quantity}</span>
                  )}
                  
                  <span class="wireframe-text text-sm" style="color: var(--color-theme-tertiary);">
                    {currency}{item.price.toFixed(2)} each
                  </span>
                </div>
              </div>
              
              {/* Item Total */}
              <div class="text-right ml-4">
                <div class="wireframe-text font-medium item-total" data-item-id={item.id}>
                  {currency}{(item.price * item.quantity).toFixed(2)}
                </div>
                {allowEdit && (
                  <button class="wireframe-text text-sm mt-1 hover:opacity-70 transition-opacity"
                          style="color: var(--color-theme-tertiary);"
                          data-item-id={item.id} data-action="remove">
                    Remove
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>

    {/* Discount Code Section */}
    <div class="border-t pt-4 mb-4" style="border-color: var(--color-theme-stroke);">
      <div class="flex gap-3">
        <div class="flex-grow wireframe-box doodle-border rounded-lg">
          <input 
            type="text" 
            placeholder="Enter discount code"
            value={discountCode || ""}
            class="w-full p-3 bg-transparent wireframe-text outline-none"
            id="discount-code-input"
          />
        </div>
        <button class="px-4 py-3 rounded-lg font-medium border transition-opacity hover:opacity-80"
                style="border-color: var(--color-theme-stroke); color: var(--color-theme-button);"
                id="apply-discount-btn">
          Apply
        </button>
      </div>
      
      {/* Applied Discount */}
      {discountCode && discountAmount > 0 && (
        <div class="flex items-center justify-between mt-3 p-3 rounded-lg" 
             style="background-color: var(--color-theme-quaternary);">
          <div class="flex items-center gap-2">
            <Icon name="bx:bx-check-circle" class="w-4 h-4" style="color: var(--color-theme-button);" />
            <span class="wireframe-text text-sm">Code "{discountCode}" applied</span>
          </div>
          <button class="wireframe-text text-sm hover:opacity-70 transition-opacity"
                  style="color: var(--color-theme-tertiary);"
                  id="remove-discount-btn">
            Remove
          </button>
        </div>
      )}
    </div>

    {/* Order Totals */}
    <div class="space-y-3">
      
      {/* Subtotal */}
      <div class="flex justify-between items-center">
        <span class="wireframe-text">Subtotal</span>
        <span class="wireframe-text" id="subtotal-amount">{currency}{subtotal.toFixed(2)}</span>
      </div>
      
      {/* Discount */}
      {discountAmount > 0 && (
        <div class="flex justify-between items-center">
          <span class="wireframe-text">Discount ({discountCode})</span>
          <span class="wireframe-text" style="color: var(--color-theme-button);" id="discount-amount">
            -{currency}{discountAmount.toFixed(2)}
          </span>
        </div>
      )}
      
      {/* Shipping */}
      {shipping > 0 ? (
        <div class="flex justify-between items-center">
          <span class="wireframe-text">Shipping</span>
          <span class="wireframe-text">{currency}{shipping.toFixed(2)}</span>
        </div>
      ) : (
        <div class="flex justify-between items-center">
          <span class="wireframe-text">Shipping</span>
          <span class="wireframe-text" style="color: var(--color-theme-button);">Free</span>
        </div>
      )}
      
      {/* Tax */}
      <div class="flex justify-between items-center">
        <span class="wireframe-text">Tax ({taxRate}%)</span>
        <span class="wireframe-text" id="tax-amount">{currency}{taxAmount.toFixed(2)}</span>
      </div>
    </div>

    {/* Total */}
    <div class="border-t pt-4 mt-4" style="border-color: var(--color-theme-stroke);">
      <div class="flex justify-between items-center">
        <span class="wireframe-heading text-xl">Total</span>
        <span class="wireframe-heading text-2xl" style="color: var(--color-theme-button);" id="total-amount">
          {currency}{total.toFixed(2)}
        </span>
      </div>
    </div>

    {/* Order Notes */}
    <div class="mt-6 pt-4 border-t" style="border-color: var(--color-theme-stroke);">
      <label class="block wireframe-text text-sm font-medium mb-2">Order Notes (Optional)</label>
      <div class="wireframe-box doodle-border rounded-lg">
        <textarea 
          placeholder="Any special instructions or requests..."
          class="w-full p-3 bg-transparent wireframe-text outline-none resize-none"
          rows="3"
          id="order-notes"></textarea>
      </div>
    </div>
  </div>
</div>

<!-- Order Summary JavaScript -->
<script define:vars={{ items, currency, taxRate, shipping }}>
  document.addEventListener('DOMContentLoaded', function() {
    let currentItems = [...items];
    let currentDiscount = 0;
    let currentDiscountCode = "";
    
    // Quantity change handlers
    document.addEventListener('click', function(e) {
      const itemId = e.target.closest('[data-item-id]')?.dataset.itemId;
      const action = e.target.closest('[data-action]')?.dataset.action;
      
      if (!itemId || !action) return;
      
      const item = currentItems.find(i => i.id === itemId);
      if (!item) return;
      
      switch (action) {
        case 'increase':
          item.quantity++;
          break;
        case 'decrease':
          if (item.quantity > 1) {
            item.quantity--;
          }
          break;
        case 'remove':
          if (confirm('Remove this item from your cart?')) {
            const index = currentItems.findIndex(i => i.id === itemId);
            currentItems.splice(index, 1);
          }
          break;
      }
      
      updateOrderSummary();
    });
    
    // Discount code handlers
    const discountInput = document.getElementById('discount-code-input');
    const applyBtn = document.getElementById('apply-discount-btn');
    const removeBtn = document.getElementById('remove-discount-btn');
    
    if (applyBtn) {
      applyBtn.addEventListener('click', function() {
        const code = discountInput?.value.trim();
        if (code) {
          // Simulate discount validation
          if (code === 'SAVE10') {
            currentDiscount = 10;
            currentDiscountCode = code;
          } else if (code === 'SAVE20') {
            currentDiscount = 20;
            currentDiscountCode = code;
          } else {
            alert('Invalid discount code');
            return;
          }
          updateOrderSummary();
        }
      });
    }
    
    if (removeBtn) {
      removeBtn.addEventListener('click', function() {
        currentDiscount = 0;
        currentDiscountCode = "";
        if (discountInput) discountInput.value = "";
        updateOrderSummary();
      });
    }
    
    // Update order summary
    function updateOrderSummary() {
      // Update quantities and item totals
      currentItems.forEach(item => {
        const quantityEl = document.querySelector(`[data-item-id="${item.id}"].quantity-display`);
        const totalEl = document.querySelector(`[data-item-id="${item.id}"].item-total`);
        
        if (quantityEl) quantityEl.textContent = item.quantity;
        if (totalEl) totalEl.textContent = `${currency}${(item.price * item.quantity).toFixed(2)}`;
      });
      
      // Calculate totals
      const subtotal = currentItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      const subtotalAfterDiscount = subtotal - currentDiscount;
      const taxAmount = (subtotalAfterDiscount + shipping) * (taxRate / 100);
      const total = subtotalAfterDiscount + shipping + taxAmount;
      
      // Update totals display
      const subtotalEl = document.getElementById('subtotal-amount');
      const discountEl = document.getElementById('discount-amount');
      const taxEl = document.getElementById('tax-amount');
      const totalEl = document.getElementById('total-amount');
      
      if (subtotalEl) subtotalEl.textContent = `${currency}${subtotal.toFixed(2)}`;
      if (discountEl) discountEl.textContent = `-${currency}${currentDiscount.toFixed(2)}`;
      if (taxEl) taxEl.textContent = `${currency}${taxAmount.toFixed(2)}`;
      if (totalEl) totalEl.textContent = `${currency}${total.toFixed(2)}`;
      
      // Show/hide discount row
      const discountRow = discountEl?.closest('.flex');
      if (discountRow) {
        discountRow.style.display = currentDiscount > 0 ? 'flex' : 'none';
      }
      
      // Show/hide discount applied notification
      const discountNotification = document.querySelector('.flex.items-center.justify-between');
      if (discountNotification && discountNotification.textContent.includes('applied')) {
        discountNotification.style.display = currentDiscountCode ? 'flex' : 'none';
      }
      
      // Dispatch update event
      document.dispatchEvent(new CustomEvent('order-updated', {
        detail: { 
          items: currentItems, 
          subtotal, 
          discount: currentDiscount,
          tax: taxAmount,
          total 
        }
      }));
    }
  });
</script>

<style>
  /* Quantity button hover effects */
  [data-action] {
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  [data-action]:hover {
    opacity: 0.7;
    transform: scale(1.05);
  }
  
  /* Input placeholder styling */
  input::placeholder,
  textarea::placeholder {
    color: var(--color-theme-tertiary);
  }
  
  /* Focus styles */
  input:focus,
  textarea:focus {
    outline: none;
  }
  
  /* Smooth transitions for updates */
  .quantity-display,
  .item-total,
  #subtotal-amount,
  #discount-amount,
  #tax-amount,
  #total-amount {
    transition: all 0.3s ease;
  }
</style>