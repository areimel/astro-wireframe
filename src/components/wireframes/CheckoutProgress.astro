---
import { Icon } from "astro-icon/components";

export interface Props {
  /** Current active step (0-indexed) */
  currentStep?: number;
  /** Array of step configurations */
  steps?: Array<{
    id: string;
    title: string;
    description?: string;
    icon: string;
  }>;
  /** Layout orientation */
  orientation?: "horizontal" | "vertical";
  /** Show step descriptions */
  showDescriptions?: boolean;
  /** Custom classes */
  class?: string;
  /** Size variant */
  size?: "sm" | "md" | "lg";
}

const { 
  currentStep = 0,
  steps = [
    { id: "cart", title: "Cart", description: "Review your items", icon: "bx:bx-cart" },
    { id: "shipping", title: "Shipping", description: "Delivery details", icon: "bx:bx-package" },
    { id: "payment", title: "Payment", description: "Billing information", icon: "bx:bx-credit-card" },
    { id: "confirmation", title: "Confirmation", description: "Order complete", icon: "bx:bx-check-circle" }
  ],
  orientation = "horizontal",
  showDescriptions = true,
  class: className = "",
  size = "md"
} = Astro.props;

// Size configurations
const sizeConfig = {
  sm: {
    circle: "w-8 h-8",
    icon: "w-4 h-4", 
    title: "text-sm",
    description: "text-xs",
    connector: "h-0.5"
  },
  md: {
    circle: "w-10 h-10",
    icon: "w-5 h-5",
    title: "text-base", 
    description: "text-sm",
    connector: "h-1"
  },
  lg: {
    circle: "w-12 h-12",
    icon: "w-6 h-6",
    title: "text-lg",
    description: "text-base", 
    connector: "h-1"
  }
};

const config = sizeConfig[size];

// Determine step states
const getStepState = (index: number) => {
  if (index < currentStep) return "completed";
  if (index === currentStep) return "active";
  return "upcoming";
};
---

<div class={`checkout-progress ${className}`}>
  
  {orientation === "horizontal" ? (
    <!-- Horizontal Layout -->
    <div class="flex items-center justify-between w-full">
      {steps.map((step, index) => {
        const state = getStepState(index);
        const isLast = index === steps.length - 1;
        
        return (
          <div class="flex items-center flex-1">
            
            <!-- Step Circle -->
            <div class="relative flex flex-col items-center">
              <div class={`${config.circle} rounded-full border-2 flex items-center justify-center transition-all duration-300 step-circle`}
                   data-state={state}>
                
                {state === "completed" ? (
                  <Icon name="bx:bx-check" class={config.icon} />
                ) : (
                  <Icon name={step.icon} class={config.icon} />
                )}
              </div>
              
              <!-- Step Content -->
              <div class="mt-3 text-center">
                <div class={`font-medium step-title ${config.title}`} data-state={state}>
                  {step.title}
                </div>
                {showDescriptions && step.description && (
                  <div class={`step-description ${config.description} mt-1`} data-state={state}>
                    {step.description}
                  </div>
                )}
              </div>
            </div>
            
            <!-- Connector Line -->
            {!isLast && (
              <div class="flex-1 px-4">
                <div class={`w-full ${config.connector} rounded-full connector-line`} 
                     data-state={state}>
                </div>
              </div>
            )}
          </div>
        );
      })}
    </div>
  ) : (
    <!-- Vertical Layout -->
    <div class="space-y-6">
      {steps.map((step, index) => {
        const state = getStepState(index);
        const isLast = index === steps.length - 1;
        
        return (
          <div class="relative flex items-start">
            
            <!-- Connector Line (Vertical) -->
            {!isLast && (
              <div class="absolute top-12 left-5 w-0.5 h-12 connector-line" 
                   data-state={state}>
              </div>
            )}
            
            <!-- Step Circle -->
            <div class={`${config.circle} rounded-full border-2 flex items-center justify-center flex-shrink-0 transition-all duration-300 step-circle`}
                 data-state={state}>
              
              {state === "completed" ? (
                <Icon name="bx:bx-check" class={config.icon} />
              ) : (
                <Icon name={step.icon} class={config.icon} />
              )}
            </div>
            
            <!-- Step Content -->
            <div class="ml-4 flex-grow">
              <div class={`font-medium step-title ${config.title}`} data-state={state}>
                {step.title}
              </div>
              {showDescriptions && step.description && (
                <div class={`step-description ${config.description} mt-1`} data-state={state}>
                  {step.description}
                </div>
              )}
            </div>
          </div>
        );
      })}
    </div>
  )}
</div>

<!-- Progress Update Methods -->
<script define:vars={{ steps }}>
  // Utility functions for updating progress
  window.checkoutProgress = {
    
    // Update to specific step
    goToStep: function(stepIndex) {
      const progressElement = document.querySelector('.checkout-progress');
      if (!progressElement) return;
      
      // Update step states
      const stepCircles = progressElement.querySelectorAll('.step-circle');
      const stepTitles = progressElement.querySelectorAll('.step-title');
      const stepDescriptions = progressElement.querySelectorAll('.step-description');
      const connectorLines = progressElement.querySelectorAll('.connector-line');
      
      stepCircles.forEach((circle, index) => {
        let state;
        if (index < stepIndex) state = "completed";
        else if (index === stepIndex) state = "active"; 
        else state = "upcoming";
        
        circle.setAttribute('data-state', state);
        
        // Update icon for completed steps
        if (state === "completed") {
          const icon = circle.querySelector('[name*="bx"]');
          if (icon) {
            icon.setAttribute('name', 'bx:bx-check');
          }
        } else {
          const icon = circle.querySelector('[name*="bx"]');
          if (icon && steps[index]) {
            icon.setAttribute('name', steps[index].icon);
          }
        }
      });
      
      stepTitles.forEach((title, index) => {
        let state;
        if (index < stepIndex) state = "completed";
        else if (index === stepIndex) state = "active";
        else state = "upcoming";
        title.setAttribute('data-state', state);
      });
      
      stepDescriptions.forEach((desc, index) => {
        let state;
        if (index < stepIndex) state = "completed";
        else if (index === stepIndex) state = "active";
        else state = "upcoming";
        desc.setAttribute('data-state', state);
      });
      
      connectorLines.forEach((line, index) => {
        const state = index < stepIndex ? "completed" : "upcoming";
        line.setAttribute('data-state', state);
      });
    },
    
    // Move to next step
    nextStep: function() {
      const current = this.getCurrentStep();
      if (current < steps.length - 1) {
        this.goToStep(current + 1);
      }
    },
    
    // Move to previous step
    previousStep: function() {
      const current = this.getCurrentStep();
      if (current > 0) {
        this.goToStep(current - 1);
      }
    },
    
    // Get current step index
    getCurrentStep: function() {
      const activeElement = document.querySelector('[data-state="active"]');
      if (!activeElement) return 0;
      
      const circles = Array.from(document.querySelectorAll('.step-circle'));
      return circles.findIndex(circle => circle.getAttribute('data-state') === 'active');
    },
    
    // Mark step as error
    setStepError: function(stepIndex, hasError = true) {
      const circles = document.querySelectorAll('.step-circle');
      const titles = document.querySelectorAll('.step-title');
      
      if (circles[stepIndex]) {
        if (hasError) {
          circles[stepIndex].setAttribute('data-error', 'true');
          titles[stepIndex].setAttribute('data-error', 'true');
        } else {
          circles[stepIndex].removeAttribute('data-error');
          titles[stepIndex].removeAttribute('data-error');
        }
      }
    }
  };
</script>

<style>
  /* Step Circle States */
  .step-circle[data-state="completed"] {
    background-color: var(--color-theme-button);
    border-color: var(--color-theme-button);
    color: var(--color-theme-button-text);
  }
  
  .step-circle[data-state="active"] {
    background-color: var(--color-theme-bg);
    border-color: var(--color-theme-button);
    color: var(--color-theme-button);
  }
  
  .step-circle[data-state="upcoming"] {
    background-color: var(--color-theme-bg);
    border-color: var(--color-theme-stroke);
    color: var(--color-theme-tertiary);
  }
  
  .step-circle[data-error="true"] {
    background-color: #ef4444;
    border-color: #ef4444;
    color: white;
  }
  
  /* Step Title States */
  .step-title[data-state="completed"] {
    color: var(--color-theme-button);
  }
  
  .step-title[data-state="active"] {
    color: var(--color-theme-headline);
  }
  
  .step-title[data-state="upcoming"] {
    color: var(--color-theme-tertiary);
  }
  
  .step-title[data-error="true"] {
    color: #ef4444;
  }
  
  /* Step Description States */
  .step-description[data-state="completed"] {
    color: var(--color-theme-paragraph);
  }
  
  .step-description[data-state="active"] {
    color: var(--color-theme-paragraph);
  }
  
  .step-description[data-state="upcoming"] {
    color: var(--color-theme-tertiary);
  }
  
  /* Connector Line States */
  .connector-line[data-state="completed"] {
    background-color: var(--color-theme-button);
  }
  
  .connector-line[data-state="upcoming"] {
    background-color: var(--color-theme-stroke);
  }
  
  /* Transitions */
  .step-circle {
    transition: all 0.3s ease;
  }
  
  .step-title, .step-description {
    transition: color 0.3s ease;
  }
  
  .connector-line {
    transition: background-color 0.3s ease;
  }
  
  /* Hover Effects */
  .step-circle:hover {
    transform: scale(1.05);
  }
</style>