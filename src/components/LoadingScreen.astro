---
// Loading screen component with spinning loader
---

<div id="loading-screen" class="loading-screen fixed inset-0 z-[9999] flex items-center justify-center theme-bg">
  <div class="loading-content flex flex-col items-center space-y-4">
    <!-- Spinning Loader -->
    <div class="spinner relative">
      <div class="spinner-ring"></div>
      <div class="spinner-ring"></div>
      <div class="spinner-ring"></div>
      <div class="spinner-ring"></div>
    </div>
    
    <!-- Loading Text -->
    <div class="loading-text text-center">
      <h2 class="text-lg font-semibold theme-headline mb-1">Scribbling...</h2>
    </div>
  </div>
</div>

<style>
  .loading-screen {
    transition: opacity 0.5s ease-out, visibility 0.5s ease-out;
  }
  
  .loading-screen.fade-out {
    opacity: 0;
    visibility: hidden;
  }
  
  /* Spinning Loader Animation */
  .spinner {
    display: inline-block;
    position: relative;
    width: 48px;
    height: 48px;
  }
  
  .spinner-ring {
    box-sizing: border-box;
    display: block;
    position: absolute;
    width: 38px;
    height: 38px;
    margin: 5px;
    border: 3px solid transparent;
    border-radius: 50%;
    animation: spin 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
    border-top-color: var(--color-theme-button);
  }
  
  .spinner-ring:nth-child(1) {
    animation-delay: -0.45s;
    border-top-color: var(--color-theme-button);
  }
  
  .spinner-ring:nth-child(2) {
    animation-delay: -0.3s;
    border-top-color: var(--color-theme-secondary);
  }
  
  .spinner-ring:nth-child(3) {
    animation-delay: -0.15s;
    border-top-color: var(--color-theme-tertiary);
  }
  
  .spinner-ring:nth-child(4) {
    animation-delay: 0s;
    border-top-color: var(--color-theme-highlight);
  }
  
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  
  /* Loading text animation */
  .loading-text {
    animation: pulse 2s ease-in-out infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.6;
    }
  }
  
  /* Page content fade-in */
  .page-content {
    opacity: 0;
    transition: opacity 0.8s ease-in;
  }
  
  .page-content.fade-in {
    opacity: 1;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    class LoadingManager {
      constructor() {
        this.loadingScreen = document.getElementById('loading-screen');
        this.pageContent = document.querySelector('.page-content');
        this.minLoadingTime = 800; // Minimum loading time in ms
        this.startTime = Date.now();
        this.themeReady = false;
        this.domReady = false;
        
        this.init();
      }
      
      init() {
        // Ensure the loading screen is visible initially
        if (this.loadingScreen) {
          this.loadingScreen.style.opacity = '1';
          this.loadingScreen.style.visibility = 'visible';
        }
        
        // Listen for theme ready event
        document.addEventListener('themeReady', () => {
          this.themeReady = true;
          this.checkReadiness();
        });
        
        // Wait for everything to be ready
        this.waitForReadyState();
      }
      
      waitForReadyState() {
        // Wait for DOM and resources to load
        if (document.readyState === 'complete') {
          this.domReady = true;
          this.checkReadiness();
        } else {
          window.addEventListener('load', () => {
            this.domReady = true;
            this.checkReadiness();
          });
        }
      }
      
      checkReadiness() {
        // Only proceed when both theme and DOM are ready
        if (this.themeReady && this.domReady) {
          this.checkMinimumTime();
        }
      }
      
      checkMinimumTime() {
        const elapsedTime = Date.now() - this.startTime;
        const remainingTime = Math.max(0, this.minLoadingTime - elapsedTime);
        
        // Wait for minimum loading time to ensure smooth experience
        setTimeout(() => {
          this.hideLoadingScreen();
        }, remainingTime);
      }
      
      hideLoadingScreen() {
        if (!this.loadingScreen) return;
        
        // Add fade-out class to loading screen
        this.loadingScreen.classList.add('fade-out');
        
        // Show page content
        if (this.pageContent) {
          this.pageContent.classList.add('fade-in');
        }
        
        // Remove loading screen from DOM after animation
        setTimeout(() => {
          if (this.loadingScreen && this.loadingScreen.parentNode) {
            this.loadingScreen.parentNode.removeChild(this.loadingScreen);
          }
        }, 500);
      }
    }
    
    // Initialize loading manager
    new LoadingManager();
  });
</script>