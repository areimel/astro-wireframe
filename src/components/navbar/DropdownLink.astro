---
const { title, lastItem, children } = Astro.props;
---

<li class="relative">
  <div class="dropdown-container ">
    <button
      class="dropdown-trigger flex items-center gap-1 w-full lg:w-auto lg:px-3 py-2 theme-paragraph hover:theme-headline transition-colors"
      aria-expanded="false"
      aria-haspopup="true">
      <span>{title}</span>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="3"
        stroke="currentColor"
        class="dropdown-arrow w-3 h-3 mt-0.5 transition-transform duration-200">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
      </svg>
    </button>
    <div
      class:list={[
        "dropdown-menu lg:absolute theme-bg w-full lg:w-48 z-10 opacity-0 invisible transition-all duration-200",
        lastItem
          ? "lg:right-0 origin-top-right"
          : "lg:left-0 origin-top-left",
      ]}>
      <div
        class="px-3 lg:py-2 lg:theme-bg lg:rounded-md lg:shadow-sm lg:border flex flex-col">
        {
          children.map((item) => (
            <a
              href={item.path}
              class="py-1 theme-paragraph hover:theme-headline transition-colors">
              {item.title}
            </a>
          ))
        }
      </div>
    </div>
  </div>
</li>

<script>
	// Show dropdown on hover (with basic keyboard support)
	document.addEventListener('DOMContentLoaded', function () {
		const dropdownContainers = document.querySelectorAll('.dropdown-container');

		const closeContainer = (container) => {
			const trigger = container.querySelector('.dropdown-trigger');
			const menu = container.querySelector('.dropdown-menu');
			const arrow = container.querySelector('.dropdown-arrow');
			if (!trigger || !menu || !arrow) return;
			trigger.setAttribute('aria-expanded', 'false');
			menu.classList.add('opacity-0', 'invisible');
			arrow.classList.remove('rotate-180');
		};

		const openContainer = (container) => {
			const trigger = container.querySelector('.dropdown-trigger');
			const menu = container.querySelector('.dropdown-menu');
			const arrow = container.querySelector('.dropdown-arrow');
			if (!trigger || !menu || !arrow) return;
			// Close others first
			dropdownContainers.forEach((other) => {
				if (other !== container) closeContainer(other);
			});
			trigger.setAttribute('aria-expanded', 'true');
			menu.classList.remove('opacity-0', 'invisible');
			arrow.classList.add('rotate-180');
		};

		dropdownContainers.forEach((container) => {
			const trigger = container.querySelector('.dropdown-trigger');
			const menu = container.querySelector('.dropdown-menu');
			const arrow = container.querySelector('.dropdown-arrow');
			if (!trigger || !menu || !arrow) return;

			// Hover interactions
			container.addEventListener('mouseenter', () => openContainer(container));
			container.addEventListener('mouseleave', () => closeContainer(container));

			// Keyboard focus interactions
			container.addEventListener('focusin', () => openContainer(container));
			container.addEventListener('focusout', (e) => {
				if (!container.contains(e.relatedTarget)) closeContainer(container);
			});
		});

		// Click outside closes any open dropdown
		document.addEventListener('click', (e) => {
			dropdownContainers.forEach((container) => {
				if (!container.contains(e.target)) closeContainer(container);
			});
		});
	});
</script>